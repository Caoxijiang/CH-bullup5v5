@startuml
==组建战斗队伍==
客户端1->服务端:创建队伍
note left:点击创建队伍按钮\n进入创建队伍界面
' 邀请好友组成队伍\n1人-5人不等并组成\n队伍
服务端->服务端:维护队伍信息, 为该队伍\n创建一个SocketRoom
服务端-->客户端1:feedback(是一个统一\n的反馈协议包)
note left: feedback统一管理

==邀请好友进入队伍==
客户端1->服务端:邀请好友
服务端->客户端2:好友邀请信息
客户端2-->服务端:接受/拒绝邀请
note right: 选择是否接受
服务端->服务端:刷新队伍信息
note left: 有一个专门处理各种队伍\n信息的监听器
服务端-->客户端1:feedback
note right: 如果好友拒绝
服务端->客户端1: 该队伍的最新信息
note left: 刷新队伍信息
服务端->客户端2: 该队伍的最新信息
...广播队伍信息...

==战队创建==
客户端1->服务端: 确认创建队伍
服务端->服务端: 维护队伍信息,更新队\n伍状态
服务端-->客户端1: feedback
note left: 进入对战大厅
服务端->客户端2:feedback
...广播feedback...
服务端->客户端1: 队伍列表
服务端->客户端2: 队伍列表
...广播队伍信息...

==战队应战==
客户端3->服务端: 队伍详情请求
note right: 用户从对战大厅中选中\n一个队伍点击用户详情
服务端-->客户端3: 队伍详情
客户端3->服务端: 对战请求
note right: 该客户端是一个队\n伍的队长
服务端->客户端1: 对战请求
note left: 选择是否接受对战
客户端1->服务端: 同意对战
服务端->服务端:维护队伍信息, 将双方队伍\n信息放入对战缓存
note left: 这里需要让客户端访问不到\n已经创建对局的队伍双方信\n息
服务端->客户端1: 游戏信息
服务端->客户端2: 游戏信息
服务端->客户端3: 游戏信息
...广播创建的游戏信息...
服务端->客户端3: 创建lol房间
客户端3->客户端3: 自动创建lol房间
客户端3-->服务端: lol房间信息
服务端->客户端1: lol房间信息
服务端->客户端2: lol房间信息
...广播lol房间信息...
@enduml